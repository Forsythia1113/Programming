#include <iostream>
using namespace std;

class UI {
public:
	static int main_menu() {
		int n;
		cout << endl << "삽입:1. 삭제:2, 모두보기:3, 종료:4  >>  ";
		cin >> n;
		return n;
	}
	static int show_shape() {
		int n;
		cout << endl << "선:1, 원:2, 사각형:3 >> ";
		cin >> n;
		return n;
	}
	static int del_shape() {
		int n;
		cout << endl << "삭제하고자 하는 도형의 인덱스 >> ";
		cin >> n;
		return n;
	}
};

class Shape { // Node
	Shape* next;
protected:
	virtual void draw() { cout << "--Shape--" << endl; }
public:
	Shape() { next = NULL; }
	virtual ~Shape() {}
	Shape* add(Shape* p) {
		this->next = p;
		return p;
	}
	Shape* getNext() { return next; }
	void paint() { draw(); }
	void setNext(Shape* p) { this->next = p->next; }
};

class Line : public Shape {
public:
	virtual void draw() { cout << "Line" << endl; }
};

class Circle : public Shape {
public:
	virtual void draw() { cout << "Circle" << endl; }
};

class Rect : public Shape {
public:
	virtual void draw() { cout << "Rectangle" << endl; }
};

class GraphicEditor {
	int node_size;
	Shape* pStart;
	Shape* pLast;
public:
	GraphicEditor() {
		pStart = NULL;
		node_size = 0;
	}
	int run() {
		cout << "그래픽 에디터입니다." << endl;
		while (true) {
			int n = UI::main_menu();
			switch (n) {
			case 1: {
				n = UI::show_shape();
				input_shape(n);
				break;
			}
			case 2: {
				if (pStart == NULL) {
					cout << "리스트가 없습니다." << endl;
					break;
				}
				n = UI::del_shape();
				del(n);
				break;
			}
			case 3: {
				show();
				break;
			}
			case 4: {
				exit(0);
			}
			default:
				cout << "메뉴를 잘못 선택했습니다." << endl;
			}
		}
	}
	void input_shape(int n) {
		switch (n) {
		case 1: {
			if (node_size == 0) {
				pStart = new Line();
				pLast = pStart;
			}
			else
				pLast = pLast->add(new Line());
			node_size++;
			break;
		}
		case 2: {
			if (node_size == 0) {
				pStart = new Circle();
				pLast = pStart;
			}
			else
				pLast = pLast->add(new Circle());
			node_size++;
			break;
		}
		case 3: {
			if (node_size == 0) {
				pStart = new Rect();
				pLast = pStart;
			}
			else
				pLast = pLast->add(new Rect());
			node_size++;
			break;
		}
		default:
			cout << "메뉴를 잘못 고르셨습니다." << endl;
		}
	}
	bool del(int n) {
		int k = 0;
		Shape* target_node = pStart;
		Shape* priv_node = 0;
		if (n == 0) {
			pStart = pStart->getNext();
			delete target_node;
		}
		else {
			while ((target_node != NULL) && (k < n)) {
				priv_node = target_node;
				target_node = target_node->getNext();
				k++;
			}
			if (target_node == NULL) {
				cout << "없는 노드입니다.\n";
				return false;
			}
			else {
				priv_node->setNext(target_node);
				delete target_node;
			}
		}
		node_size--;

	}
	void show() {
		Shape* p = pStart;
		int i = 0;
		if (p == NULL)
			cout << "List Empty\n";
		else
			while (p != NULL) {
				cout << i << ": ";
				p->paint();
				p = p->getNext();
				i++;
			}
	}
};

int main() {
	GraphicEditor* g_editor = new GraphicEditor;
	g_editor->run();
	delete g_editor;
}